import serial
import requests
import time
import json
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è serial —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
ser = None

def simple_esp32_client(serial_port, server_url):
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global ser
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ serial –ø–æ—Ä—Ç—É
        ser = serial.Serial(serial_port, 9600, timeout=1)
        time.sleep(2)
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {serial_port}")
        print("–û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        while True:
            try:
                if ser.in_waiting > 0:
                    # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É
                    line = ser.readline().decode('utf-8', errors='ignore').strip()
                    
                    if line:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                        if line.startswith("MESSAGE:"):
                            message = line.replace("MESSAGE:", "").strip()
                            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                            data = {
                                "message": message,
                                "timestamp": datetime.now().isoformat(),
                                "source": "esp32_color_sensor"
                            }
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                            try:
                                response = requests.post(
                                    server_url,
                                    json=data,
                                    headers={'Content-Type': 'application/json'},
                                    timeout=5
                                )
                                if response.status_code == 200:
                                    print("‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                                else:
                                    print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
                            except Exception as e:
                                print(f"‚úó –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
                        
                        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        elif line in ["READY", "ERROR"]:
                            print(f"–°—Ç–∞—Ç—É—Å ESP32: {line}")
            
            except serial.SerialException as e:
                print(f"–û—à–∏–±–∫–∞ Serial –ø–æ—Ä—Ç–∞: {e}")
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
            
            time.sleep(0.1)
            
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        close_serial()

def close_serial():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è serial —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    global ser
    if ser is not None and ser.is_open:
        ser.close()
        print("Serial —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        ser = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
import atexit
atexit.register(close_serial)

if __name__ == "__main__":
    try:
        simple_esp32_client(
            serial_port="COM12",
            server_url="http://localhost:7999/api/data"
        )
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        close_serial()